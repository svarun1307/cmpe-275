# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import fluffy_pb2 as fluffy__pb2


class RouteServiceStub(object):
  """a service interface (contract)

  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.request = channel.unary_unary(
        '/route.RouteService/request',
        request_serializer=fluffy__pb2.Route.SerializeToString,
        response_deserializer=fluffy__pb2.Route.FromString,
        )


class RouteServiceServicer(object):
  """a service interface (contract)

  """

  def request(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RouteServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'request': grpc.unary_unary_rpc_method_handler(
          servicer.request,
          request_deserializer=fluffy__pb2.Route.FromString,
          response_serializer=fluffy__pb2.Route.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'route.RouteService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
